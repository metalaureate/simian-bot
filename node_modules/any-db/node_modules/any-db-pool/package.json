{
  "name": "any-db-pool",
  "version": "2.0.1",
  "description": "Any-DB connection pool",
  "main": "index.js",
  "author": {
    "name": "Stephen Sugden",
    "email": "me@stephensugden.com"
  },
  "license": "BSD-2-Clause",
  "scripts": {
    "test": "covert tests/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/grncdr/node-any-db-pool.git"
  },
  "bugs": {
    "url": "https://github.com/grncdr/node-any-db-pool/issues"
  },
  "dependencies": {
    "generic-pool": "~2.0.2",
    "once": "~1.1.1"
  },
  "devDependencies": {
    "tape": "~2.3.2",
    "any-db-fake": "~0.0.3",
    "covert": "~0.1.1"
  },
  "readme": "# any-db-pool - database agnostic connection pool\n\n[![Build Status](https://secure.travis-ci.org/grncdr/node-any-db.png?branch=master)](http://travis-ci.org/grncdr/node-any-db-pool)\n\n## Synopsis\n\n```javascript\nvar anyDB = require('any-db')\n\nvar pool = anyDB.createPool('postgres://user:pass@localhost/dbname', {\n  min: 5, max: 15,\n  reset: function (conn, done) {\n    conn.query('ROLLBACK', done)\n  }\n})\n\n// Proxies to mysql's connection.query\nvar q = pool.query('SELECT 1', function (err, res) { })\n```\n\n*Note:* As shown above, [ConnectionPool](#api) instances are usually created\nwith [anyDB.createPool][createPool]. The [any-db][] package will be installed\nalongside any adapters (e.g. [any-db-postgres][]), so most users should depend\non their adapter and **not** on `any-db` or `any-db-pool`.\n\n## Description\n\nThis package contains a database connection pool that can be used with any\ndriver, but it requires an [any-db compliant adapter][Adapter]. If you are\nwriting a library that needs to support multiple database backends (e.g.\nSQLite3 or Postgres or MySQL) then it's strongly recommended that you add\n[any-db][] toyour `peerDependencies` and rely on [createPool][] instead of\ndepending on this package directly.\n\n## API\n\n```ocaml\nmodule.exports := (Adapter, adapterConfig: Object, PoolConfig) => ConnectionPool\n\nConnectionPool := EventEmitter & {\n  adapter: String,\n  query:   (String, Array?, Continuation<ResultSet>?) => Query,\n  acquire: (Continuation<Connection>) => void,\n  release: (Connection) => void,\n  close:   (Continuation<void>?) => void,\n}\n\nPoolConfig := {\n  min: Number?,\n  max: Number?,\n  onConnect: (Connection, ready: Continuation<Connection>) => void\n  reset: (Connection, done: Continuation<void>) => void\n}\n```\n\n### PoolConfig\n\nA `PoolConfig` is generally a plain object with any of the following properties (they are all optional):\n\n - `min` (default `0`) The minimum number of connections to keep open in the pool.\n - `max` (default `10`) The maximum number of connections to keep open in the pool. When this limit is reached further requests for connections will queue waiting for an existing connection to be released back into the pool.\n - `onConnect` Called immediately after a connection is first established. Use this to do one-time setup of new connections. The supplied `Connection` will not be added to the pool until you pass it to the `done` continuation.\n - `reset` Called each time a connection is returned to the pool. Use this to restore a connection to it's original state (e.g. rollback transactions, set the database session vars). If `reset` fails to call the `done` continuation the connection will be lost in limbo.\n\n### ConnectionPool.query\n\n```ocaml\n(String, Array?, Continuation<ResultSet>?) => Query\n```\n\nImplements [Queryable.query][] by automatically acquiring a connection and\nreleasing it when the query completes.\n\n### ConnectionPool.acquire\n\n```ocaml\n(Continuation<Connection>) => void\n```\n\nRemove a connection from the pool. If you use this method you **must** return\nthe connection back to the pool using [ConnectionPool.release](#connectionpoolrelease)\n\n### ConnectionPool.release\n\n```ocaml\n(Connection) => void\n```\n\nReturn a connection to the pool. This should only be called with connections\nyou've manually [acquired](#connectionpoolacquire). You **must not** continue\nto use the connection after releasing it.\n\n### ConnectionPool.close\n\n```ocaml\n(Continuation<void>?) => void\n```\n\nStop giving out new connections, and close all existing database connections as\nthey are returned to the pool.\n\n### ConnectionPool.adapter\n\nThe string name of the adapter used for this connection pool, e.g. `'sqlite3'`.\n\n### ConnectionPool events\n\n * `'acquire'` - emitted whenever `pool.acquire` is called\n * `'release'` - emitted whenever `pool.release` is called\n * `'query', query` - emitted immediately after `.query` is called on a\n   connection via `pool.query`. The argument is a [Query][] object.\n * `'close'` - emitted when the connection pool has closed all of it\n   connections after a call to `close()`.\n\n## Why wouldn't I just use `generic-pool`?\n\n[generic-pool][gpool] is awesome, but it's *very* generic.  This is a Good\nThing for a library with \"generic\" in the name, but not so good for the very\ncommon but slightly more specialized case of pooling stateful SQL database\nconnections.  This library uses `generic-pool` and simply augments it with some\nadded niceties:\n\n* Hooks for initializing and/or resetting connection state when connections are added or returned to the pool.\n* A `query` method that allows queries to be performed without the user needing a reference to a connection object (and potentially leaking that reference).\n\n## Stop telling me not to use this directly\n\nOk, if you really want to use this package without using the [any-db][]\nfrontend you should provide a compliant [Adapter][] implementation:\n\n```javascript\nvar ConnectionPool = require('any-db-pool')\nvar adapter = require('my-custom-adapter')\nvar connectionParams = { user: 'scott', password: 'tiger' }\nvar poolParams = {\n  min: 5, max: 15,\n  reset: function (conn, done) {\n    conn.query('ROLLBACK', done)\n  }\n}\nvar pool = new ConnectionPool(adapter, connectionParams, poolParams)\n```\n\nHowever, it would be awesome if you just published your adapter as a\npackage named `any-db-$name` so that everybody could use it :+1:\n\n## License\n\nMIT\n\n[gpool]: http://npm.im/generic-pool\n[any-db]: https://github.com/grncdr/node-any-db\n[any-db-postgres]: https://github.com/grncdr/node-any-db-postgres\n[Adapter]: https://github.com/grncdr/node-any-db-adapter-spec#adapter\n[createPool]: https://github.com/grncdr/node-any-db#exportscreatepool\n[Queryable.query]: https://github.com/grncdr/node-any-db-adapter-spec#queryablequery\n[Query]: https://github.com/grncdr/node-any-db-adapter-spec#query\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/grncdr/node-any-db-pool",
  "_id": "any-db-pool@2.0.1",
  "_from": "any-db-pool@~2.0.1"
}
